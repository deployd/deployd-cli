#!/usr/bin/env node

/**
 * External dependencies
 */

var cli = require('../lib/cli');


cli.program
  .version(require('../package').version)
  .option('-m, --mongod [path]', 'path to mongod executable (defaults to `mongod`)')
  .option('-p, --port [port]', 'port to host server (defaults to 2403)')
  .option('-w, --wait', 'wait for input before exiting')
  .option('-d, --dashboard', 'start the dashboard immediately')
  .option('-o, --open', 'open in a browser')
  .option('-e, --environment [env]', 'defaults to development')
  .option('-H, --host [host]', 'specify host for mongo server')
  .option('-P, --mongoPort [mongoPort]', 'mongodb port to connect to')
  .option('-n, --dbname [dbname]', 'name of the mongo database')
  .option('-a, --auth', 'prompts for mongo server credentials')
  .option('    --deploydPath [deploydPath]', 'allow overriding the path to deployd main script');

cli.program
  .command('create [project-name]')
  .description('\tcreate a project in a new directory\n\teg. `dpd create my-app`')
  .action(cli.create);

cli.program
  .command('keygen')
  .description('\tgenerate a key for remote access (./.dpd/keys.json)')
  .action(cli.keygen);

cli.program
  .command('showkey')
  .description('\tshows current key for connecting to remote dashboard (./.dpd/keys.json)')
  .action(cli.showkey);


cli.program
  .command('*')
  .description('\t[default] start the server in the current project in development mode\n' +
               '\twith an interactive shell/repl for interacting with the running server\n' +
               '\te.g. dpd (starts server in current directory),\n' +
               '\t     dpd my-app/app.dpd (starts app from file)')
  .action(cli.start);


/**
 * Parse the arguments
 */

cli.program.parse(process.argv);

if (cli.program.args.length === 0) cli.start();